#!/bin/bash

# check_kube.sh - Monitors various aspects of Kubernetes
# Charles Bender
# csb1582@gmail.com
#
# Some examples:
# Kubelet check on node1 - ./check_kube.sh -t node -c Ready -n default -o node1 -k /path/to/kubeconfig
# Deployment check - ./check_kube.sh -t deployment -c Available -n default -o deployment1 -k /path/to/kubeconfig 
# Daemonset check - ./check_kube.sh -t daemonset -n kube-system -c status -o kube-flannel-ds-amd64 -k /path/to/kubeconfig
# Component check - ./check_kube.sh -t componentstatuses -n default -c status -o etcd-0 -k /path/to/kubeconfig
#
# kubectl and jq are required for this plugin to work

usage="./check_kube.sh -t [node|deployment|daemonset|replicationcontroller|componentstatuses] -c [MemoryPressure,DiskPressure,PIDPressure,Ready|Available,Progressing|status|status|status] -n [namespace] -o [object] -k [kubeconfig path]"
ok=0
warning=1
critical=2
unknown=3

# check prereqs
test_kubectl=`which kubectl`
test_jq=`which jq`
if [ -z "$test_kubectl" ] || [ -z "$test_jq" ]; then
  echo "kubectl or jq not found. Cannot continue"
  exit $unknown
fi

# node checks
check_node () {
  node_status=`kubectl --kubeconfig=$kubeconfig -n $namespace get nodes $object -o json | jq -r --arg check "$check" '.status | .conditions[] | select(.type==$check) | .status'`
  if [ "$check" == "Ready" ] && [ "$node_status" == "False" ]; then
    echo "CRITICAL - Kubelet reports Not Ready"
    return $critical
  elif [ "$check" == "Ready" ] && [ "$node_status" == "True" ]; then
    echo "OK - Kubelet reports Ready"
    return $ok
  elif ( [ "$check" == "MemoryPressure" ] || [ "$check" == "DiskPressure" ] || [ "$check" == "PIDPressure" ] ) && [ "$node_status" == "True" ]; then
    echo "CRITICAL - $check reports True"
    return $critical
  elif ( [ "$check" == "MemoryPressure" ] || [ "$check" == "DiskPressure" ] || [ "$check" == "PIDPressure" ] ) && [ "$node_status" == "False" ]; then
    echo "OK - $check reports False"
    return $ok
  else
    echo "UNKNOWN - output not understood"
    return $unknown
  fi
}

# deployment checks
check_deployment () {
  deployment_status=`kubectl --kubeconfig=$kubeconfig -n $namespace get deployments. $object -o json | jq -r --arg check "$check" '.status | .conditions[] | select(.type==$check) | .status'`
  ready_replicas=`kubectl --kubeconfig=$kubeconfig -n $namespace get deployments. $object -o json | jq -r '.status | .readyReplicas'`
  progess_message=`kubectl --kubeconfig=$kubeconfig -n $namespace get deployments. $object -o json | jq -r '.status | .conditions[] | select(.type=="Progressing") | .message'`
  if ( [ "$check" == "Available" ] || [ "$check" == "Progressing" ] ) && [ "$deployment_status" == "False" ]; then
    echo "CRITICAL - Deployment check $check returned False. $ready_replicas replicas are running. Last progress message $progess_message"
    return $critical
  elif ( [ "$check" == "Available" ] || [ "$check" == "Progressing" ] ) && [ "$deployment_status" == "True" ]; then
    echo "OK - Deployment check $check returned True. $ready_replicas replicas are running. Last progress message $progess_message"
    return $ok
  else
    echo "UNKNOWN - output not understood"
    return $unknown
  fi
}

# daemonset checks
check_daemonset () {
  ds_ready=`kubectl --kubeconfig=$kubeconfig -n $namespace get ds $object -o json | jq -r '.status | .numberReady'`
  ds_scheduled=`kubectl --kubeconfig=$kubeconfig -n $namespace get ds $object -o json | jq -r '.status | .currentNumberScheduled'`
  if [ $ds_ready -lt $ds_scheduled ]; then
    echo "CRITICAL - $ds_ready replicas are running. $ds_scheduled are scheuled to run."
    return $critical
  elif [ $ds_ready -eq $ds_scheduled ]; then
    echo "OK - $ds_ready replicas are running. $ds_scheduled are scheduled to run."
    return $ok
  else
    echo "UNKNOWN - output not understood"
    return $unknown
  fi
}

# replicationcontroller checks
check_replicationcontroller () {
  rc_ready=`kubectl --kubeconfig=$kubeconfig -n $namespace get rc $object -o json | jq -r '.status | .readyReplicas'`
  rc_scheduled=`kubectl --kubeconfig=$kubeconfig -n $namespace get rc $object -o json | jq -r '.spec | .replicas'`
  if [ $rc_ready -lt $rc_scheduled ]; then
    echo "CRITICAL - $rc_ready replicas are running. $rc_scheduled are scheuled to run."
    return $critical
  elif [ $rc_ready -eq $rc_scheduled ]; then
    echo "OK - $rc_ready replicas are running. $rc_scheduled are scheduled to run."
    return $ok
  else
    echo "UNKNOWN - output not understood"
    return $unknown
  fi
}

# componentstatuses checks
check_componentstatuses () {
  cs_status=`kubectl --kubeconfig=$kubeconfig -n $namespace get cs $object -o json | jq -r '.conditions[] | select(.type=="Healthy") | .status'`
  if [ "$cs_status" == "False" ]; then
    echo "CRITICAL - Component Status health check for $object returned False"
    return $critical
  elif [ "$cs_status" == "True" ]; then
    echo "OK - Component Status health check for $object returned True"
    return $ok
  else
    echo "UNKNOWN - output not understood"
    return $unknown
  fi
}

# get input parameters and validate
while getopts "t:c:n:o:k:" input; do
  case $input in
    o)
      object=$OPTARG
      ;;
    n)
      namespace=$OPTARG
      ;;
    c)
      check=$OPTARG
      ;;
    t)
      type=$OPTARG
      ;;
    k)
      kubeconfig=$OPTARG
      ;;
    *)
      echo $usage
      exit $unknown
      ;;
  esac
done
if [ -z "$object" ] || [ -z "$check" ] || [ -z "$type" ] || [ -z "$namespace" ] || [ -z "$kubeconfig" ]; then
  echo $usage
  exit $unknown
fi

# Verify kubeconfig exists and is readable
if [ ! -r "$kubeconfig" ]; then
  echo "UNKNOWN - Kubeconfig file $kubeconfig does not exist or is not readable"
  exit $unknown
fi

# execute checks
check_$type
exit $?